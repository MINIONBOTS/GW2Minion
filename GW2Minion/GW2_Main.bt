local tbl = 
{
	class = "BehaviorTree",
	nodes = 
	{
		
		{
			class = "Sequence",
			nodes = 
			{
				
				{
					class = "Action",
					nodes = 
					{
					},
					settings = 
					{
					},
					variables = 
					{
						finishcode = "",
						info = "Character Screen Handling",
						monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))\nGUI:Text('Guest Server ID: '..tostring(Settings.GW2Minion.guestserver))\nGUI:Text(\"Guest Server Name: \"..ml_global_information.GuestServerList[Settings.GW2Minion.guestserver])\nGUI:Text('Autologin Enabled: '..tostring(Settings.GW2Minion.autostartbot))\nGUI:Text('GameState: '..tostring(ml_global_information.GameState))\nif (self.lastrun) then\n\tGUI:Text('Lastrun: '..tostring(TimeSince(self.lastrun)))\nend\n\n",
						runcode = "-- In CHaracter screen\nif ( ml_global_information.GameState == GW2.GAMESTATE.CHARSELECT) then\n\t\tself.lastrun = self.lastrun or ml_global_information.Now\n\n\t\tif (self.lastrun and TimeSince(self.lastrun) > 5000 ) then \n\t\t\t\tself.lastrun = ml_global_information.Now\n\n\t\t\t\tif ( Settings.GW2Minion.guestserver ~= 0 ) then\t\n\t\t\t\t\t\td(\"Selecting Guestserver: \"..ml_global_information.GuestServerList[Settings.GW2Minion.guestserver] ..\" ID: \".. tostring(Settings.GW2Minion.guestserver))\n\t\t\t\t\t\tSetServer(Settings.GW2Minion.guestserver)\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\tif ( Settings.GW2Minion.autostartbot == true ) then\n\t\t\t\t\t\t-- TODO: Make a proper login manager for character switching, using not the silly press enter but rather the actual function to login a character by name!\n\t\t\t\t\t\tPressKey(\"RETURN\")\n\t\t\t\tend\n\t\tend\n\t\t\n\t\tself:running()\nelse\n\t\tself.lastrun = nil\n\t\tself:success()\nend\n",
						startcode = "",
					},
				},
				
				{
					class = "Action",
					nodes = 
					{
					},
					settings = 
					{
					},
					variables = 
					{
						finishcode = "",
						info = "Cutscene",
						monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
						runcode = "if(Settings.GW2Minion.skipcutscene and (ml_global_information.GameState == 14 or ml_global_information.GameState == GW2.GAMESTATE.CINEMATIC)) then\n\t\tself.lastrun = self.lastrun or ml_global_information.Now\n\t\tself.rndskip = self.rndskip or math.random(2000,5000)\n\t\tif(self.lastrun and TimeSince(self.lastrun) > self.rndskip) then \n\t\t\t\tself.lastrun = ml_global_information.Now\n\t\t\t\tself.rndskip = nil\n\t\t\t\td(\"Skipping cutscene...\")\n\t\t\t\tPressKey(\"ESC\")\n\t\tend\n\t\tself:running()\nelse\n\t\tself.lastrun = nil\n\t\tself:success()\nend",
						startcode = "",
					},
				},
				
				{
					class = "Action",
					nodes = 
					{
					},
					settings = 
					{
					},
					variables = 
					{
						finishcode = "",
						info = "Check gamestate",
						monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
						runcode = "if ( ml_global_information.GameState == GW2.GAMESTATE.GAMEPLAY ) then\n\t\tself:success()\nelse\n\t\tself:fail()\nend",
						startcode = "",
					},
				},
				
				{
					class = "Sequence",
					nodes = 
					{
						
						{
							class = "Action",
							nodes = 
							{
							},
							settings = 
							{
							},
							variables = 
							{
								finishcode = "",
								info = "Player Alive",
								monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))\nGUI:Text('Health State: '..tostring(ml_global_information.Player_HealthState))\nGUI:Text('Downed: '..tostring(ml_global_information.Player_HealthState == GW2.HEALTHSTATE.Downed))\nif ( ml_global_information.GameState == GW2.GAMESTATE.GAMEPLAY) then\nlocal target = gw2_common_functions.GetBestAggroTarget(true)\nif ( table.valid(target) ) then\n\tGUI:Text('Downed Target: '..target.name)\nelse\n\tGUI:Text('Downed Target: None')\nend\nGUI:Text('Castinfo-Duration: '..tostring(Player.castinfo.duration))\nend\n",
								runcode = "if ( ml_global_information.Player_HealthState == GW2.HEALTHSTATE.Alive ) then\t\n\tself:success()\nelse\n\tself:fail()\nend",
								startcode = "",
							},
						},
						
						{
							class = "AlwaysFail",
							nodes = 
							{
								
								{
									class = "PrioritySelector",
									nodes = 
									{
										
										{
											class = "Throttle",
											nodes = 
											{
												
												{
													class = "Action",
													nodes = 
													{
													},
													settings = 
													{
													},
													variables = 
													{
														finishcode = "",
														info = "Deposit Items",
														monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))\nGUI:Text(\"Mincount: \" .. (context.deposit_mincount or 0))\n\nif(GUI:TreeNode(\"Last item list\")) then\n\t\tif(table.valid(context.deposit_lastitemlist)) then\n\t\t\t\tfor _,item in pairs(context.deposit_lastitemlist) do\n\t\t\t\t\t\tGUI:Text(item.name .. \", slot: \" .. item.slot)\n\t\t\t\tend\n\t\telse\n\t\t\tGUI:Text(\"No items\")\n\t\tend\n\t\tGUI:TreePop()\nend\n\nif(GUI:TreeNode(\"Blacklist\")) then\n\t\tif(table.valid(context.deposit_blacklist) and context.deposit_blacklisttimeout) then\n\t\t\t\tfor _,item in pairs(context.deposit_blacklist) do\n\t\t\t\t\t\tlocal expire = math.ceil(((item.timestamp + context.deposit_blacklisttimeout) - ml_global_information.Now) / 1000)\n\t\t\t\t\t\tGUI:Text(item.name .. \", slot: \" .. item.slot .. \", removed in \" .. expire .. \"s\")\n\t\t\t\tend\n\t\telse\n\t\t\tGUI:Text(\"No items\")\n\t\tend\n\t\tGUI:TreePop()\nend",
														runcode = "context.deposit_blacklist = context.deposit_blacklist or {}\ncontext.deposit_mincount  = context.deposit_mincount  or math.random(2,5)\ncontext.deposit_blacklisttimeout = math.random(360000,480000)\ncontext.deposit_lastitemlist = context.deposit_lastitemlist or {}\ncontext.deposit_firstrun = context.deposit_firstrun == nil and true or context.deposit_firstrun\n\nif ( Settings.GW2Minion.deposititems == true and not context.deposit_firstrun) then\n\t\tlocal IList = Inventory(\"\")\n\n\t\tif(table.valid(context.deposit_blacklist)) then\n\t\t\t\tfor k,v in pairs(context.deposit_blacklist) do\n\t\t\t\t\t\tif(TimeSince(v.timestamp) > context.deposit_blacklisttimeout) then\n\t\t\t\t\t\t\t\tcontext.deposit_blacklist[k] = nil\n\t\t\t\t\t\tend\n\t\t\t\tend\n\t\tend\n\t\t\n\t\t-- Check the inventory to find items we couldn't deposit last time\n\t\t-- Items that are blacklisted are not counted towards the deposit limit\n\t\tif(table.valid(IList)) then\n\t\t\t\tfor slot,item in pairs(IList) do\n\t\t\t\t\t\tlocal key = item.itemid..\"-\"..slot\n\t\t\t\t\t\tif(context.deposit_lastitemlist[key]) then\n\t\t\t\t\t\t\tcontext.deposit_blacklist[key] = {timestamp = ml_global_information.Now, name = item.name, slot = slot}\n\t\t\t\t\t\t\tcontext.deposit_lastitemlist[key] = nil\n\t\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\t\n\t\tend\n\t\t\n\t\tif(table.valid(context.deposit_lastitemlist)) then\n\t\t\t\tfor _,item in pairs(context.deposit_lastitemlist) do\n\t\t\t\t\t\td(\"[Deposit]: \" .. item.name .. \" was sent to material storage or you moved it to another slot\")\n\t\t\t\tend\n\t\t\t\tcontext.deposit_lastitemlist = {}\n\t\tend\n\t\t\n\t\t-- Count items we can deposit\n\t\tlocal depositcount = 0\n\t\tlocal lastitemlist = {}\n\t\tfor slot,item in pairs(IList) do\n\t\t\t\tlocal key = item.itemid..\"-\"..slot\n\t\t\t\tif(not context.deposit_blacklist[key]) then\n\t\t\t\t\t\tdepositcount = depositcount + 1\n\t\t\t\t\t\tlastitemlist[key] = {name = item.name, itemid = item.itemid, slot = slot}\n\t\t\t\tend\n\t\tend\n\t\t\n\t\tif(depositcount > context.deposit_mincount or ml_global_information.Player_Inventory_SlotsFree < context.deposit_mincount) then\n\t\t\t\tInventory:DepositCollectables()\n\t\t\n\t\t\t\tcontext.deposit_lastitemlist = lastitemlist\n\t\t\t\tcontext.deposit_mincount  = math.random(2,5)\n\t\tend\nend\ncontext.deposit_firstrun = false\nself:fail()",
														startcode = "",
													},
												},
											},
											settings = 
											{
												duration = 16000,
											},
											variables = 
											{
												info = "DepositItems every 16 Seconds",
												monitorcode = "",
											},
										},
										
										{
											class = "Throttle",
											nodes = 
											{
												
												{
													class = "Action",
													nodes = 
													{
													},
													settings = 
													{
													},
													variables = 
													{
														finishcode = "",
														info = "AOE Loot",
														monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
														runcode = "if (Settings.GW2Minion.Loot and ml_global_information.Player_Inventory_SlotsFree > 0 ) then\n\t\tPlayer:AoELoot()\nend\n\nself:fail()\n\n",
														startcode = "",
													},
												},
											},
											settings = 
											{
												duration = 1050,
											},
											variables = 
											{
												info = "AOE Loot every 1050 ms",
												monitorcode = "",
											},
										},
										
										{
											class = "Throttle",
											nodes = 
											{
												
												{
													class = "Action",
													nodes = 
													{
													},
													settings = 
													{
													},
													variables = 
													{
														finishcode = "",
														info = "Salvage every ~1500 ms",
														monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
														runcode = "if Settings.GW2Minion.salvage then\n\t\tgw2_salvage_manager.salvage()\nend\n\nself:fail()",
														startcode = "",
													},
												},
											},
											settings = 
											{
												duration = 1500,
											},
											variables = 
											{
												info = "Salvage every ~1500 ms",
												monitorcode = "",
											},
										},
										
										{
											class = "Throttle",
											nodes = 
											{
												
												{
													class = "Action",
													nodes = 
													{
													},
													settings = 
													{
													},
													variables = 
													{
														finishcode = "",
														info = "Claim Rewards every 15 second",
														monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
														runcode = "if (Settings.GW2Minion.claimRewards and ml_global_information.Player_InCombat == false and ml_global_information.Player_Inventory_SlotsFree > 5 and Player:CanClaimReward()) then\n   Player:ClaimReward()\nend\n\nself:fail()",
														startcode = "",
													},
												},
											},
											settings = 
											{
												duration = 15000,
											},
											variables = 
											{
												info = "Claim Rewards every 15 second",
												monitorcode = "",
											},
										},
										
										{
											class = "Throttle",
											nodes = 
											{
												
												{
													class = "Action",
													nodes = 
													{
													},
													settings = 
													{
													},
													variables = 
													{
														finishcode = "",
														info = "Equip Gathering Tools- Check every 10 seconds",
														monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
														runcode = "if (ml_global_information.Player_InCombat == false and Settings.GW2Minion.equipGathering) then\n   local key = gw2_buy_manager.toolListIDToKey(gw2_buy_manager.toolList) -- Get key asociated with chosen tool type. Eg: \"copper\" = 1\n   if (key and ml_global_information.Player_Level >= gw2_buy_manager.LevelRestrictions[key]) then\n      -- Check for valid key and if player level is high enough for the chosen tool.\n      if (Inventory:GetEquippedItemBySlot(GW2.EQUIPMENTSLOT.ForagingTool) == nil and table.valid(Inventory(\"itemID=\" .. gw2_buy_manager.tools.foraging[key]))) or\n              (Inventory:GetEquippedItemBySlot(GW2.EQUIPMENTSLOT.LoggingTool) == nil and table.valid(Inventory(\"itemID=\" .. gw2_buy_manager.tools.logging[key]))) or\n              (Inventory:GetEquippedItemBySlot(GW2.EQUIPMENTSLOT.MiningTool) == nil and table.valid(Inventory(\"itemID=\" .. gw2_buy_manager.tools.mining[key]))) then\n\n         local _, fTool = next(Inventory(\"itemID=\" .. gw2_buy_manager.tools.foraging[key])) -- Get correct tool in Inventory.\n         local _, lTool = next(Inventory(\"itemID=\" .. gw2_buy_manager.tools.logging[key]))\n         local _, mTool = next(Inventory(\"itemID=\" .. gw2_buy_manager.tools.mining[key]))\n\n         if (Inventory:GetEquippedItemBySlot(GW2.EQUIPMENTSLOT.ForagingTool) == nil and table.valid(fTool)) then\n            d(\"[GW2 Main]: Equipping Sickle ..\")\n            fTool:Equip(GW2.EQUIPMENTSLOT.ForagingTool)\n         elseif (Inventory:GetEquippedItemBySlot(GW2.EQUIPMENTSLOT.LoggingTool) == nil and table.valid(lTool)) then\n            d(\"[GW2 Main]: Equipping Axe ..\")\n            lTool:Equip(GW2.EQUIPMENTSLOT.LoggingTool)\n         elseif (Inventory:GetEquippedItemBySlot(GW2.EQUIPMENTSLOT.MiningTool) == nil and table.valid(mTool)) then\n            d(\"[GW2 Main]: Equipping Pick ..\")\n            mTool:Equip(GW2.EQUIPMENTSLOT.MiningTool)\n         end\n      end\n   end\nend\nself:fail()",
														startcode = "",
													},
												},
											},
											settings = 
											{
												duration = 10000,
											},
											variables = 
											{
												info = "Equip Gathering Tools- Check every 10 seconds",
												monitorcode = "",
											},
										},
										
										{
											class = "Throttle",
											nodes = 
											{
												
												{
													class = "Action",
													nodes = 
													{
													},
													settings = 
													{
													},
													variables = 
													{
														finishcode = "",
														info = "Clear Memory",
														monitorcode = "",
														runcode = "if ( Settings.GW2Minion.reduceram ) then\n\t\tClearMemory()\nend",
														startcode = "",
													},
												},
											},
											settings = 
											{
												duration = 300000,
											},
											variables = 
											{
												monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) if ( self.lastrun ) then local tmr = self.settings.duration/1000 - (GetTickCount() - self.lastrun) if ( tmr < 0 ) then tmr = 0 end GUI:Text('Runs again in: '..tostring(math.round(tmr,2 ))..' s')\telse\tGUI:Text('Runs again in: '..tostring(math.round(self.settings.duration/1000))..' s') end",
											},
										},
										
										{
											class = "Throttle",
											nodes = 
											{
												
												{
													class = "Action",
													nodes = 
													{
													},
													settings = 
													{
													},
													variables = 
													{
														finishcode = "",
														info = "Disable Rendering after 10 seconds ingame to save CPU",
														monitorcode = "",
														runcode = "if (Settings.GW2Minion.disablerendering) then\n\t\tRenderManager:ToggleRendering(true)\nend",
														startcode = "",
													},
												},
											},
											settings = 
											{
												duration = 10000,
											},
											variables = 
											{
												monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) if ( self.lastrun ) then local tmr = self.settings.duration/1000 - (GetTickCount() - self.lastrun) if ( tmr < 0 ) then tmr = 0 end GUI:Text('Runs again in: '..tostring(math.round(tmr,2 ))..' s')\telse\tGUI:Text('Runs again in: '..tostring(math.round(self.settings.duration/1000))..' s') end",
											},
										},
									},
									settings = 
									{
									},
									variables = 
									{
										info = "General (instant) Tasks",
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.runningTask or 'None'))",
									},
								},
							},
							settings = 
							{
							},
							variables = 
							{
								info = "General (instant) Tasks, which don't interfear with the bot.",
								monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
							},
						},
					},
					settings = 
					{
					},
					variables = 
					{
						info = "",
						monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.actualTask or 'None'))",
					},
				},
			},
			settings = 
			{
				failThreshold = 1,
				successThreshold = 1,
			},
			variables = 
			{
				info = "GameState Switch",
				monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.activeTask or 'None')) GUI:Text('Succeeded Tasks: '..tostring(self.succeededTasks)) GUI:Text('Failed Tasks: '..tostring(self.failedTasks)) GUI:Text('Running Tasks: '..tostring(self.ranTasks))",
			},
		},
	},
	settings = 
	{
	},
	variables = 
	{
		filename = "GW2_Main.bt",
		finishcode = "",
		info = "GW2Minion core code, gets called from gw2.lua every Tick.\nUpdates Managers and sets Global Variables. Handles GameStates.\nUpdates Managers and global variables. Handles Main Window and GameStates.",
		menucode = "local visible, open = Settings.GW2Minion.UI.visible, Settings.GW2Minion.UI.open\nif open then\n\n\tvisible, open = GUI:Begin(\"GW2Minion Settings\", open)\n\tif visible then\n\t\tGUI:PushItemWidth(-1)\n\t\tlocal function StartLabel(txt)\n\t\t\tGUI:BeginGroup()\n\t\t\tGUI:AlignFirstTextHeightToWidgets()\n\t\t\tGUI:Text(GetString(txt))\n\t\t\tGUI:SameLine(165)\n\t\tend\n\t\tlocal function EndLabel(tooltip)\n\t\t\tGUI:EndGroup()\n\n\t\t\tif tooltip and (GUI:IsItemHovered()) then\n\t\t\t\tGUI:SetTooltip(tooltip)\n\t\t\tend\n\t\tend\n\t\tlocal acc_name = GetAccountName()\n\t\tlocal content, changed\n\t\tif GUI:CollapsingHeader(\"General\") then\n\t\t\tStartLabel(GetString(\"Show BT Edit\"))\n\t\t\tcontent, changed = GUI:Checkbox(\"##show_edit\", Settings.MainMenu.button.show_edit)\n\t\t\tif (changed) then\n\t\t\t\tSettings.MainMenu.button.show_edit = content\n\t\t\t\tSettings.MainMenu.button = Settings.MainMenu.button\n\t\t\tend\n\t\t\tEndLabel(GetString(\"Shows a button to edit BehaviorTrees.\"))\n\n\t\t\tStartLabel(GetString(\"Reduce RAM usage\"))\n\t\t\tcontent, changed = GUI:Checkbox(\"##reduceram\", Settings.GW2Minion.reduceram)\n\t\t\tif (changed) then\n\t\t\t\tSettings.GW2Minion.reduceram = content\n\t\t\t\tClearMemory()\n\t\t\tend\n\t\t\tEndLabel(GetString(\"If enabled, GW2 uses less RAM at the cost of higher CPU and loading times (HDD).\"))\n\n\t\t\tStartLabel(GetString(\"Disable rendering\"))\n\t\t\tcontent, changed = GUI:Checkbox(\"##disablerendering\", Settings.GW2Minion.disablerendering)\n\t\t\tif (changed) then\n\t\t\t\tSettings.GW2Minion.disablerendering = content\n\t\t\t\tRenderManager:ToggleRendering(Settings.GW2Minion.disablerendering)\n\t\t\tend\n\t\t\tEndLabel(GetString(\"Turns off Rendering. Can cause crashes when you have the Main-Map open in the wrong moment!\"))\n\n\t\t\tStartLabel(GetString(\"Auto start bot\"))\n\t\t\tcontent, changed = GUI:Checkbox(\"##autostartbot\", Settings.GW2Minion.autostartbot)\n\t\t\tif changed then\n\t\t\t\tSettings.GW2Minion.autostartbot = content\n\t\t\tend\n\t\t\tEndLabel(GetString(\"Automatically start the bot one time after the set delay.\"))\n\n\t\t\tStartLabel(GetString(\"Auto start delay (ms)\"))\n\t\t\tcontent, changed = GUI:InputInt(\"##autostart_delay\", Settings.GW2Minion.autostart_delay, 250, 1000)\n\t\t\tif changed then\n\t\t\t\tSettings.GW2Minion.autostart_delay = content\n\t\t\tend\n\t\t\tEndLabel(GetString(\"Set the delay before starting the bot.\"))\n\n\t\t\tStartLabel(GetString(\"Guest server\"))\n\t\t\tcontent, changed = GUI:Combo(\"##guestserver\", Settings.GW2Minion.guestserver, ml_global_information.GuestServerList)\n\t\t\tif changed then\n\t\t\t\tSettings.GW2Minion.guestserver = content\n\t\t\tend\n\t\t\tEndLabel(GetString(\"Select the server you want to guest on. This won't change much since the change made by anet with their mega servers.\"))\n\t\tend\n\n\t\tif GUI:CollapsingHeader(\"Ingame\") then\n\n\t\t\tStartLabel(GetString(\"Show Vendor Assistant\"))\n\t\t\tcontent, changed = GUI:Checkbox(\"##vendorassist\", Settings.GW2Minion.vendorassist)\n\t\t\tif changed then\n\t\t\t\tSettings.GW2Minion.vendorassist = content\n\t\t\tend\n\t\t\tEndLabel(GetString(\"Toggles the vendor assistant window.\"))\n\n\t\t\tStartLabel(GetString(\"Claim Rewards\"))\n\t\t\tcontent, changed = GUI:Checkbox(\"##claimRewards\", Settings.GW2Minion.claimRewards)\n\t\t\tif changed then\n\t\t\t\tSettings.GW2Minion.claimRewards = content\n\t\t\tend\n\t\t\tEndLabel(GetString(\"Automatically claim rewards if possible.\"))\n\n\t\t\tStartLabel(GetString(\"Equip Gathering Tools\"))\n\t\t\tcontent, changed = GUI:Checkbox(\"##equipGathering\", Settings.GW2Minion.equipGathering)\n\t\t\tif changed then\n\t\t\t\tSettings.GW2Minion.equipGathering = content\n\t\t\tend\n\t\t\tEndLabel(GetString(\"Automatically equip gathering tools if none are equipped.\"))\n\n\t\t\tStartLabel(GetString(\"Loot\"))\n\t\t\tcontent, changed = GUI:Checkbox(\"##Loot\", Settings.GW2Minion.Loot)\n\t\t\tif changed then\n\t\t\t\tSettings.GW2Minion.Loot = content\n\t\t\tend\n\t\t\tEndLabel(GetString(\"Automatically loot all nearby enemies.\"))\n\n\t\t\tStartLabel(GetString(\"Run Salvage Manager\"))\n\t\t\tcontent, changed = GUI:Checkbox(\"##salvage\", Settings.GW2Minion.salvage)\n\t\t\tif changed then\n\t\t\t\tSettings.GW2Minion.salvage = content\n\t\t\tend\n\t\t\tEndLabel(GetString(\"Use the 'Salvage Manager' to automatically salvage gear. Requires to set up said Manager.\"))\n\n\t\t\tStartLabel(GetString(\"Deposit items\"))\n\t\t\tcontent, changed = GUI:Checkbox(\"##deposititems\", Settings.GW2Minion.deposititems)\n\t\t\tif changed then\n\t\t\t\tSettings.GW2Minion.deposititems = content\n\t\t\tend\n\t\t\tEndLabel(GetString(\"Automatically deposit materials in your bank every 16 seconds.\"))\n\n\t\t\tStartLabel(GetString(\"Deposit items\"))\n\t\t\tcontent, changed = GUI:Checkbox(\"##deposititems\", Settings.GW2Minion.deposititems)\n\t\t\tif changed then\n\t\t\t\tSettings.GW2Minion.deposititems = content\n\t\t\tend\n\t\t\tEndLabel(GetString(\"Automatically deposit materials in your bank every 16 seconds.\"))\n\n\t\t\tStartLabel(GetString(\"Skip cutscene\"))\n\t\t\tcontent, changed = GUI:Checkbox(\"##skipcutscene\", Settings.GW2Minion.skipcutscene)\n\t\t\tif changed then\n\t\t\t\tSettings.GW2Minion.skipcutscene = content\n\t\t\tend\n\t\t\tEndLabel(GetString(\"Try to skip cutscences automatically.\"))\n\t\tend\n\n\t\tif GUI:CollapsingHeader(\"Revive\") then\n\n\t\t\tStartLabel(GetString(\"Revive dead players\"))\n\t\t\tcontent, changed = GUI:Checkbox(\"##revivedeadplayers\", Settings.GW2Minion.revivedeadplayers)\n\t\t\tif changed then\n\t\t\t\tSettings.GW2Minion.revivedeadplayers = content\n\t\t\tend\n\t\t\tEndLabel(GetString(\"Revive dead players if your current botmode uses the default revive handler.\"))\n\n\t\t\tStartLabel(GetString(\"Revive downed players\"))\n\t\t\tcontent, changed = GUI:Checkbox(\"##revivedownedplayers\", Settings.GW2Minion.revivedownedplayers)\n\t\t\tif changed then\n\t\t\t\tSettings.GW2Minion.revivedownedplayers = content\n\t\t\tend\n\t\t\tEndLabel(GetString(\"Revive downed players if your current botmode uses the default revive handler.\"))\n\n\t\t\tStartLabel(GetString(\"Revive NPCs\"))\n\t\t\tcontent, changed = GUI:Checkbox(\"##revivenpcs\", Settings.GW2Minion.revivenpcs)\n\t\t\tif changed then\n\t\t\t\tSettings.GW2Minion.revivenpcs = content\n\t\t\tend\n\t\t\tEndLabel(GetString(\"Revive NPCs if your current botmode uses the default revive handler.\"))\n\n\t\t\tStartLabel(GetString(\"Revive party members\"))\n\t\t\tcontent, changed = GUI:Checkbox(\"##revivepartymember\", Settings.GW2Minion.revivepartymember)\n\t\t\tif changed then\n\t\t\t\tSettings.GW2Minion.revivepartymember = content\n\t\t\tend\n\t\t\tEndLabel(GetString(\"Revive party members if your current botmode uses the default revive handler.\"))\n\t\tend\n\n\t\tif GUI:CollapsingHeader(\"Combat\") then\n\n\t\t\tStartLabel(GetString(\"Evade HP\"))\n\t\t\tcontent, changed = GUI:SliderInt(\"##evadehpthreshold\", Settings.GW2Minion.evadehpthreshold, 0, 100)\n\t\t\tif changed then\n\t\t\t\tSettings.GW2Minion.evadehpthreshold = content\n\t\t\tend\n\t\t\tEndLabel(GetString(\"The Bot will evade attacks if your HP Percent is below this value.\"))\n\n\t\t\tStartLabel(GetString(\"Combat movement\"))\n\t\t\tcontent, changed = GUI:Checkbox(\"##combatmovement\", Settings.GW2Minion.combatmovement)\n\t\t\tif changed then\n\t\t\t\tSettings.GW2Minion.combatmovement = content\n\t\t\tend\n\t\t\tEndLabel(GetString(\"Automatically move in combat range to your target.\"))\n\n\t\t\tStartLabel(GetString(\"Auto stomp\"))\n\t\t\tcontent, changed = GUI:Checkbox(\"##finishenemyassist\", Settings.GW2Minion.finishenemyassist)\n\t\t\tif changed then\n\t\t\t\tSettings.GW2Minion.finishenemyassist = content\n\t\t\tend\n\t\t\tEndLabel(GetString(\"Automatically stomp your enemies if your current botmode uses the default combat handler.\"))\n\n\t\t\tStartLabel(GetString(\"Ignore yellow enemies\"))\n\t\t\tcontent, changed = GUI:Checkbox(\"##ignoreyellowmobs\", Settings.GW2Minion.ignoreyellowmobs)\n\t\t\tif changed then\n\t\t\t\tSettings.GW2Minion.ignoreyellowmobs = content\n\t\t\tend\n\t\t\tEndLabel(GetString(\"Ignore yellow enemies if your current botmode uses the default combat handler.\"))\n\t\tend\n\n\t\tif GUI:CollapsingHeader(\"Mounts\") then\n\n\t\t\tStartLabel(GetString(\"Use Mount\"))\n\t\t\tcontent, changed = GUI:Checkbox(\"##usemount\", Settings.GW2Minion[acc_name].usemount)\n\t\t\tif changed then\n\t\t\t\tSettings.GW2Minion[acc_name].usemount = content\n\t\t\t\tSettings.GW2Minion.usemount = content\n\t\t\t\tSettings.GW2Minion[acc_name] = Settings.GW2Minion[acc_name]\n\t\t\tend\n\t\t\tEndLabel(GetString(\"Use your currently equiped mount when walking.\"))\n\n\t\t\tStartLabel(GetString(\"Favorite Mount\"))\n\t\t\tcontent, changed = GUI:Combo(\"##favorite_mount\", Settings.GW2Minion[acc_name].favorite_mount, {\"none\", \"Raptor\", \"Jackal\"})\n\t\t\tif changed then\n\t\t\t\tSettings.GW2Minion[acc_name].favorite_mount = content\n\t\t\t\tSettings.GW2Minion.favorit_mount = content\n\t\t\t\tSettings.GW2Minion[acc_name] = Settings.GW2Minion[acc_name]\n\t\t\tend\n\t\t\tEndLabel(GetString(\"Equips the selected Mount automatically. This works even when not having it unlocked yet!\"))\n\n\t\t\tStartLabel(GetString(\"Use Mount\"))\n\t\t\tcontent, changed = GUI:Checkbox(\"##usemount\", Settings.GW2Minion[acc_name].usemount)\n\t\t\tif changed then\n\t\t\t\tSettings.GW2Minion[acc_name].usemount = content\n\t\t\t\tSettings.GW2Minion.usemount = content\n\t\t\t\tSettings.GW2Minion[acc_name] = Settings.GW2Minion[acc_name]\n\t\t\tend\n\t\t\tEndLabel(GetString(\"Use your currently equiped mount when walking.\"))\n\n\t\t\tStartLabel(GetString(\"Mount Ability #1 Key\"))\n\t\t\tcontent, changed = GUI:Keybind(\"##mountAbility2Key\", Settings.GW2Minion[acc_name].mountAbility2Key)\n\t\t\tif changed then\n\t\t\t\tSettings.GW2Minion[acc_name].mountAbility2Key = content\n\t\t\t\tSettings.GW2Minion.mountAbility2Key = content\n\t\t\t\tSettings.GW2Minion[acc_name] = Settings.GW2Minion[acc_name]\n\t\t\tend\n\t\t\tEndLabel(GetString(\"Your ingame keybind for your Mount Ability #1. Check the ingame settings to find your keybind (F11).\"))\n\n\t\t\tStartLabel(GetString(\"Walk Backwards Key\"))\n\t\t\tcontent, changed = GUI:Keybind(\"##stepBackwardsKey\", Settings.GW2Minion[acc_name].stepBackwardsKey)\n\t\t\tif changed then\n\t\t\t\tSettings.GW2Minion[acc_name].stepBackwardsKey = content\n\t\t\t\tSettings.GW2Minion.stepBackwardsKey = content\n\t\t\t\tSettings.GW2Minion[acc_name] = Settings.GW2Minion[acc_name]\n\t\t\tend\n\t\t\tEndLabel(GetString(\"Your ingame keybind to move backwards. Arrow keys do not work! Check the ingame settings to find your keybind (F11).\"))\n\n\t\t\tStartLabel(GetString(\"Springer: High Vault\"))\n\t\t\tcontent, changed = GUI:Checkbox(\"##springerMastered\", Settings.GW2Minion[acc_name].springerMastered)\n\t\t\tif changed then\n\t\t\t\tSettings.GW2Minion[acc_name].springerMastered = content\n\t\t\t\tSettings.GW2Minion.springerMastered = content\n\t\t\t\tSettings.GW2Minion[acc_name] = Settings.GW2Minion[acc_name]\n\t\t\tend\n\t\t\tEndLabel(GetString(\"Only check this if you unlocked the mastery 'High Vault' for your springer mount.\"))\n\n\t\t\tStartLabel(GetString(\"Jackal: Shifting Sands\"))\n\t\t\tcontent, changed = GUI:Checkbox(\"##jackalPortalMastered\", Settings.GW2Minion[acc_name].jackalPortalMastered)\n\t\t\tif changed then\n\t\t\t\tSettings.GW2Minion[acc_name].jackalPortalMastered = content\n\t\t\t\tSettings.GW2Minion.jackalPortalMastered = content\n\t\t\t\tSettings.GW2Minion[acc_name] = Settings.GW2Minion[acc_name]\n\t\t\tend\n\t\t\tEndLabel(GetString(\"Only check this if you unlocked the mastery 'Shifting Sands' for your jackal mount.\"))\n\n\t\t\tStartLabel(GetString(\"Raptor: Canyon Jump\"))\n\t\t\tcontent, changed = GUI:Checkbox(\"##raptorMastered\", Settings.GW2Minion[acc_name].raptorMastered)\n\t\t\tif changed then\n\t\t\t\tSettings.GW2Minion[acc_name].raptorMastered = content\n\t\t\t\tSettings.GW2Minion.raptorMastered = content\n\t\t\t\tSettings.GW2Minion[acc_name] = Settings.GW2Minion[acc_name]\n\t\t\tend\n\t\t\tEndLabel(GetString(\"Only check this if you unlocked the mastery 'Canyon Jumping' for your raptor mount.\"))\n\t\tend\n\n\t\tGUI:PopItemWidth()\n\tend\n\n\tGUI:End()\nend\n\nif Settings.GW2Minion.UI.visible ~= visible then\n\tSettings.GW2Minion.UI.visible = visible\nend\n\nif Settings.GW2Minion.UI.open ~= open then\n\tSettings.GW2Minion.UI.open = open\nend\n\n-- Render Skill Proile UI Stuff\nif (SkillManager) then\n\tSkillManager:RenderCodeEditor()\nend",
		monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))\nGUI:Text('Game State: '..tostring(ml_global_information.GameState))",
		runcode = "",
		startcode = "",
	},
}



return tbl
