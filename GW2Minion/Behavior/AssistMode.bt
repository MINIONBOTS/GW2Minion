local tbl = 
{
	class = "BehaviorTree",
	nodes = 
	{
		
		{
			class = "PrioritySelector",
			nodes = 
			{
				
				{
					class = "Action",
					nodes = 
					{
					},
					settings = 
					{
					},
					variables = 
					{
						finishcode = "",
						info = "Ingame check",
						interruptcode = "",
						monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))\nGUI:Text('Guest Server ID: '..tostring(Settings.GW2Minion.guestserver))\nGUI:Text(\"Guest Server Name: \"..ml_global_information.GuestServerList[Settings.GW2Minion.guestserver])\nGUI:Text('Autologin Enabled: '..tostring(Settings.GW2Minion.autostartbot))\nGUI:Text('GameState: '..tostring(ml_global_information.GameState))\nif (self.lastrun) then\n\tGUI:Text('Lastrun: '..tostring(TimeSince(self.lastrun)))\nend\n\n",
						runcode = "-- In CHaracter screen\nif ( ml_global_information.GameState == GW2.GAMESTATE.GAMEPLAY) then\n\t\tself:fail()\nelse\n\t\tself:success()\nend",
						startcode = "",
					},
				},
				
				{
					class = "PrioritySelector",
					nodes = 
					{
						
						{
							class = "Sequence",
							nodes = 
							{
								
								{
									class = "Action",
									nodes = 
									{
									},
									settings = 
									{
									},
									variables = 
									{
										finishcode = "",
										info = "",
										interruptcode = "",
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
										runcode = "if ( ml_global_information.Player_HealthState == GW2.HEALTHSTATE.Defeated ) then\n\t\tif(Settings.GW2Minion.assistautorespawn) then\n\t\t\t\tself:success()\n\t\t\t\treturn\n\t\tend\n\t\tself:running()\n\t\treturn\nend\nself:fail()",
										startcode = "",
									},
								},
								
								{
									class = "SubTree",
									nodes = 
									{
									},
									settings = 
									{
									},
									variables = 
									{
										filename = "DeathHandler.st",
									},
								},
							},
							settings = 
							{
							},
							variables = 
							{
								info = "Death",
								monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.actualTask or 'None'))",
							},
						},
						
						{
							class = "SubTree",
							nodes = 
							{
							},
							settings = 
							{
							},
							variables = 
							{
								filename = "DownedHandler.st",
							},
						},
						
						{
							class = "Action",
							nodes = 
							{
							},
							settings = 
							{
							},
							variables = 
							{
								finishcode = "",
								info = "",
								interruptcode = "",
								monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
								runcode = "-- In case the setting changes right in the middle of movement\nif(context.combat_ismoving and Settings.GW2Minion.moveintocombatrange == false) then\n\t\tPlayer:StopMovement()\n\t\tcontext.combat_moveintocombatrange = false\n\t\tcontext.combat_ismoving = false\nend\nself:fail()",
								startcode = "",
							},
						},
						
						{
							class = "Sequence",
							nodes = 
							{
								
								{
									class = "Action",
									nodes = 
									{
									},
									settings = 
									{
									},
									variables = 
									{
										finishcode = "",
										info = "Finish enemies",
										interruptcode = "",
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
										runcode = "if ( Settings.GW2Minion.finishenemyassist == true) then\n\t\tif(gw2_common_functions.FinishEnemy() == true) then\n\t\t\t\td(\"[Assist]: Finishing enemy.\")\n\t\t\t\tself:success()\n\t\t\t\treturn\n\t\tend\nend\nself:fail()",
										startcode = "",
									},
								},
								
								{
									class = "Wait",
									nodes = 
									{
									},
									settings = 
									{
										duration = 1000,
									},
									variables = 
									{
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) if ( self.starttime ) then\tif ( self:getState() == 'success' ) then GUI:Text('Passed Time: '..tostring(math.round(self.settings.duration/1000))..' s') else GUI:Text('Passed Time: '..tostring(math.round(GetTickCount() - self.starttime,2 ))..' s') end else GUI:Text('Passed Time: 0 ms') end",
									},
								},
							},
							settings = 
							{
							},
							variables = 
							{
								monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.actualTask or 'None'))",
							},
						},
						
						{
							class = "Sequence",
							nodes = 
							{
								
								{
									class = "Action",
									nodes = 
									{
									},
									settings = 
									{
									},
									variables = 
									{
										finishcode = "",
										info = "",
										interruptcode = "",
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
										runcode = "if(Settings.GW2Minion.smtargetmode == 1 ) then\n\t\tself:success() -- Target Mode == None\nelse\n\t\tself:fail()\nend",
										startcode = "",
									},
								},
								
								{
									class = "Action",
									nodes = 
									{
									},
									settings = 
									{
									},
									variables = 
									{
										finishcode = "",
										info = "",
										interruptcode = "",
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
										runcode = "local target = Player:GetTarget()\nlocal combatmovement = gw2_combat_movement:GetCombatMovement()\nlocal activerange = ml_global_information.AttackRange\n\nif(combatmovement and combatmovement.range) then\n   if ( target == nil or (target.distance <= activerange)) then\n      Player:StopMovement()\n      combatmovement.range = false\n   end\nend\n\nif(target and (target.alive or target.downed or target.isentity) and (target.attackable or (target.isentity and target.attitude == GW2.ATTITUDE.Hostile and not target.isgadget and not target.ischaracter and not target.health)) and not gw2_common_functions.HasBuffs(target,ml_global_information.InvulnerabilityConditions)) then\n   SkillManager:SetTarget(target.id)\n   activerange = ml_global_information.AttackRange\n   combatmovement = gw2_combat_movement:GetCombatMovement()\n   if(Settings.GW2Minion.moveintocombatrange and ml_global_information.Player_OnMesh) then\n\n      local stoppingdistance = activerange\n      if(stoppingdistance < 300) then\n         stoppingdistance = stoppingdistance + target.radius\n      else\n         stoppingdistance = math.max(300, stoppingdistance / 1.2)\n      end\n\n      local canmove = gw2_combat_movement:CombatMovementCanMove()\n      local tPos,distance = SkillManager:PredictedPositionAndDistance(target)\n\n      if(combatmovement and canmove and distance > stoppingdistance) then\n         if(Player:MoveTo(tPos.x,tPos.y,tPos.z, target.id, stoppingdistance,false,true) >= 0) then\n            combatmovement.range = true\n         end\n      end\n   end\nelse\n   -- Don't keep casting at invalid targets\n   SkillManager:SetTarget(nil)\nend\n\nself:success()",
										startcode = "",
									},
								},
							},
							settings = 
							{
							},
							variables = 
							{
								info = "Manual target mode",
								monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.actualTask or 'None'))",
							},
						},
						
						{
							class = "PrioritySelector",
							nodes = 
							{
								
								{
									class = "Action",
									nodes = 
									{
									},
									settings = 
									{
									},
									variables = 
									{
										finishcode = "",
										info = "",
										monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))",
										runcode = "local ptarget = Player:GetTarget()\nlocal target = nil\nif(ptarget and ptarget.downed and ptarget.friendly and ptarget.distance < 200) then\n\t\tself:success()\n\t\treturn\nend\n\nif(ptarget and ptarget.attackable and not gw2_common_functions.HasBuffs(ptarget,ml_global_information.InvulnerabilityConditions) and not gw2_blacklistmanager.CheckBlacklistEntry(GetString(\"Monsters\"),ptarget.contentid) and not gw2_blacklistmanager.CheckBlacklistEntry(GetString(\"Temporary Combat\"),ptarget.id)) then\n\t\ttarget = ptarget\nend\n\nlocal besttarget\nif(not Settings.GW2Minion.assiststickytargetselection or target == nil) then\n\t\tbesttarget = gw2_common_functions.GetBestCharacterTargetForAssist()\nelseif(target ~= nil and Settings.GW2Minion.assiststickytargetselection and Settings.GW2Minion.smmode == 2 and not target.isplayer) then\n\t\t\t\t-- Sticky targeting is on and players only selected\n\t\tbesttarget = gw2_common_functions.GetBestCharacterTargetForAssist()\nend\n\nif(besttarget and (target == nil or besttarget.id ~= target.id)) then\n\t\ttarget = besttarget\nend\n\nif(target and (target.alive or target.downed) and target.attackable and not gw2_blacklistmanager.CheckBlacklistEntry(GetString(\"Monsters\"),target.contentid) and not gw2_blacklistmanager.CheckBlacklistEntry(GetString(\"Temporary Combat\"),target.id)) then\n\t\tcontext.combat_targetid = target.id\n\t\tcontext.combat_targetpos = target.pos\n\t\tcontext.combat_moveintocombatrange = Settings.GW2Minion.moveintocombatrange and ml_global_information.Player_OnMesh and target.isreachable\n\t\tcontext.combat_onmeshcheck = false\nelse\n\t\tcontext.combat_targetcheck = nil\nend\nself:fail()",
										startcode = "",
									},
								},
								
								{
									class = "SubTree",
									nodes = 
									{
									},
									settings = 
									{
									},
									variables = 
									{
										filename = "CombatHandler.st",
									},
								},
							},
							settings = 
							{
							},
							variables = 
							{
								info = "",
								monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.runningTask or 'None'))",
							},
						},
					},
					settings = 
					{
					},
					variables = 
					{
						info = "",
						monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.runningTask or 'None'))",
					},
				},
			},
			settings = 
			{
			},
			variables = 
			{
				info = "",
				monitorcode = "GUI:Text('Last State: '..tostring(self:getState())) GUI:Text('Active Child: '..tostring(self.runningTask or 'None'))",
			},
		},
	},
	settings = 
	{
	},
	variables = 
	{
		filename = "AssistMode.bt",
		finishcode = "d(\"AssistMode Off\")\n\nml_global_information.Stop()",
		info = "",
		menucode = "if (Settings.GW2Minion.smtargetmode == nil) then\n   Settings.GW2Minion.smtargetmode = 1\nend\n\nif (Settings.GW2Minion.smmode == nil) then\n   Settings.GW2Minion.smmode = 1\nend\n\nif (Settings.GW2Minion.moveintocombatrange == nil) then\n   Settings.GW2Minion.moveintocombatrange = true\nend\n\nif (Settings.GW2Minion.assistautorespawn == nil) then\n   Settings.GW2Minion.assistautorespawn = false\nend\n\nif (Settings.GW2Minion.assiststickytargetselection == nil) then\n   Settings.GW2Minion.assiststickytargetselection = false\nend\n\nif (Settings.GW2Minion.assistuseskillsdownstate == nil) then\n   Settings.GW2Minion.assistuseskillsdownstate = true\nend\n\nGUI:PushItemWidth(150)\nSettings.GW2Minion.smtargetmode = GUI:Combo(GetString(\"sMtargetmode\"), Settings.GW2Minion.smtargetmode, { GetString(\"None\"), GetString(\"LowestHealth\"), GetString(\"Closest\"), GetString(\"Biggest Crowd\"), })\nSettings.GW2Minion.smmode = GUI:Combo(GetString(\"Attack Mode\"), Settings.GW2Minion.smmode, { GetString(\"Everything\"), GetString(\"Players Only\"), })\nGUI:PopItemWidth()\n\nSettings.GW2Minion.assistuseskillsdownstate = GUI:Checkbox(GetString(\"Use skills when downed\"), Settings.GW2Minion.assistuseskillsdownstate)\nif (GUI:IsItemHovered()) then\n   GUI:SetTooltip(GetString(\"Use skills when downed.\\n(Heal, skills in profile)\"))\nend\n\nSettings.GW2Minion.moveintocombatrange = GUI:Checkbox(GetString(\"Move Into Combat Range\"), Settings.GW2Minion.moveintocombatrange)\nif (GUI:IsItemHovered()) then\n   GUI:SetTooltip(GetString(\"Move into skill range if you are on the mesh and the target is reachable.\\nYou are currently:\") .. \" \" .. (ml_global_information.Player_OnMesh and GetString(\"on mesh\") or GetString(\"not on mesh\")))\nend\n\nSettings.GW2Minion.assistautorespawn = GUI:Checkbox(GetString(\"Auto Respawn\"), Settings.GW2Minion.assistautorespawn)\nif (GUI:IsItemHovered()) then\n   GUI:SetTooltip(GetString(\"Respawn automatically when dead.\"))\nend\n\nSettings.GW2Minion.assiststickytargetselection = GUI:Checkbox(GetString(\"Sticky target selection\"), Settings.GW2Minion.assiststickytargetselection)\nif (GUI:IsItemHovered()) then\n   GUI:SetTooltip(GetString(\"When using a target mode:\\nDo not select a new target before the old one is not attackable or dead.\\nIf your target mode is 'Players Only' it will still switch if you have a npc selected.\"))\nend",
		monitorcode = "GUI:Text('Last State: '..tostring(self:getState()))\nGUI:Text('Game State: '..tostring(ml_global_information.GameState))",
		runcode = "",
		startcode = "d(\"AssistMode On\")\nml_global_information.Start()\ngw2_unstuck.manualcontrolmode = true",
	},
}



return tbl
